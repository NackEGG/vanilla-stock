
-- 특정 기간 이후 STOCK_RECORDS 조회 
CREATE OR REPLACE PROCEDURE USP_GET_LIST_STOCK_RECORDS(
	PI_STOCK_CODE IN STOCK_RECORDS.STOCK_CODE%TYPE,
	PI_T_DATE IN STOCK_RECORDS.T_DATE%TYPE,
	PO_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN
	OPEN PO_CURSOR FOR
		SELECT *
		FROM STOCK_RECORDS
		WHERE STOCK_CODE = PI_STOCK_CODE
			AND T_DATE > PI_T_DATE
		ORDER BY T_DATE;
END;
/

-- 회사명이나 회사코드로 Company 하나 선택해서 조회
CREATE OR REPLACE PROCEDURE USP_GET_COMPANY(
	PI_KEYWORD IN VARCHAR,
	PO_STOCK_CODE OUT COMPANY.STOCK_CODE%TYPE,
	PO_COMPANY OUT COMPANY.COMPANY%TYPE,
	PO_INDUSTRY_NO OUT COMPANY.INDUSTRY_NO%TYPE,
	PO_STOCK_LISTED OUT COMPANY.STOCK_LISTED%TYPE,
	PO_CAPITAL OUT COMPANY.CAPITAL%TYPE,
	PO_FACEVALUE OUT COMPANY.FACEVALUE%TYPE,
	PO_CURRENCY OUT COMPANY.CURRENCY%TYPE,
	PO_TEL OUT COMPANY.TEL%TYPE,
	PO_ADDRESS OUT COMPANY.ADDRESS%TYPE,
	PO_REGDATE OUT COMPANY.REGDATE%TYPE
	)
IS
BEGIN
	SELECT *
	INTO PO_STOCK_CODE, PO_COMPANY, PO_INDUSTRY_NO, PO_STOCK_LISTED, PO_CAPITAL,
		PO_FACEVALUE, PO_CURRENCY, PO_TEL, PO_ADDRESS, PO_REGDATE
	FROM COMPANY
	WHERE STOCK_CODE = PI_KEYWORD
		OR COMPANY = PI_KEYWORD;
END;
/

-- 회사명이나 회사코드를 검색해서 해당 키워드가 들어가는 Company List
CREATE OR REPLACE PROCEDURE USP_SEARCH_LIST_COMPANY(
	PI_KEYWORD IN VARCHAR,
	PO_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN
	OPEN PO_CURSOR FOR
		SELECT *
		FROM COMPANY
		WHERE STOCK_CODE LIKE '%'||PI_KEYWORD||'%'
			OR COMPANY LIKE '%'||PI_KEYWORD||'%'
		ORDER BY COMPANY;
END;
/

-- 회사코드로 해당 회사의 Industry 정보 조회
CREATE OR REPLACE PROCEDURE USP_GET_INDUSTRY(
	PI_STOCK_CODE IN COMPANY.STOCK_CODE%TYPE,
	PO_NO OUT INDUSTRY.NO%TYPE,
	PO_NAME OUT INDUSTRY.NAME%TYPE,
	PO_REGDATE OUT INDUSTRY.REGDATE%TYPE)
AS
BEGIN
	SELECT NO, NAME, INDUSTRY.REGDATE
	INTO PO_NO, PO_NAME, PO_REGDATE
	FROM INDUSTRY JOIN COMPANY 
	ON INDUSTRY.NO = COMPANY.INDUSTRY_NO
	WHERE COMPANY.STOCK_CODE = PI_STOCK_CODE;
END;
/

-- 게시판 Insert문
CREATE OR REPLACE PROCEDURE USP_ADD_ARTICLE(
	PI_TITLE IN ARTICLE.TITLE%TYPE,
	PI_STOCK_CODE IN ARTICLE.STOCK_CODE%TYPE,
	PI_MEMBER_NO IN ARTICLE.MEMBER_NO%TYPE
)
AS
BEGIN
	INSERT INTO ARTICLE
	VALUES(ARTICLE_SEQ.NEXTVAL, PI_TITLE, PI_STOCK_CODE, PI_MEMBER_NO, SYSDATE);
END;
/

-- 게시판 조회 문
CREATE OR REPLACE PROCEDURE USP_GET_ARTICLE(
	PIO_ARTICLE_NO IN OUT ARTICLE.NO%TYPE,
	PO_TITLE OUT ARTICLE.TITLE%TYPE,
	PO_STOCK_CODE OUT ARTICLE.STOCK_CODE%TYPE,
	PO_MEMBER_NO OUT ARTICLE.MEMBER_NO%TYPE,
	PO_REGDATE OUT ARTICLE.REGDATE%TYPE)
AS
BEGIN
	SELECT *
	INTO PIO_ARTICLE_NO, PO_TITLE, PO_STOCK_CODE, PO_MEMBER_NO, PO_REGDATE
	FROM ARTICLE
	WHERE NO = PIO_ARTICLE_NO;
END;
/
	
-- 게시판 조건 별 검색
CREATE OR REPLACE PROCEDURE USP_SEARCH_ARTICLE(
	PI_SEARCH_TYPE IN VARCHAR,
	PI_KEYWORD IN VARCHAR,
	PO_CURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
	CASE WHEN PI_SEARCH_TYPE = 'A' THEN
			OPEN PO_CURSOR FOR	
			SELECT NO, TITLE, STOCK_CODE, MEMBER_NO, ARTICLE.REGDATE
			FROM ARTICLE JOIN COMPANY
			USING(STOCK_CODE)
			WHERE TITLE LIKE '%'||PI_KEYWORD||'%'
			OR COMPANY LIKE '%'||PI_KEYWORD||'%';
		WHEN PI_SEARCH_TYPE = 'T' THEN
			OPEN PO_CURSOR FOR
			SELECT NO, TITLE, STOCK_CODE, MEMBER_NO, ARTICLE.REGDATE
			FROM ARTICLE JOIN COMPANY
			USING(STOCK_CODE)
			WHERE TITLE LIKE '%'||PI_KEYWORD||'%';
		WHEN PI_SEARCH_TYPE = 'C' THEN
			OPEN PO_CURSOR FOR
			SELECT NO, TITLE, STOCK_CODE, MEMBER_NO, ARTICLE.REGDATE
			FROM ARTICLE JOIN COMPANY
			USING(STOCK_CODE)
			WHERE COMPANY LIKE '%'||PI_KEYWORD||'%';
	END CASE;
END;
/

-- 게시판 전체 리스트 조회
CREATE OR REPLACE PROCEDURE USP_GET_ALL_ARTICLE(
	PO_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN	
	OPEN PO_CURSOR FOR
		SELECT *
		FROM ARTICLE
		ORDER BY NO DESC;
END;
/

-- 게시판 페이징 처리 + 조회
CREATE OR REPLACE PROCEDURE USP_GET_PAGE_ARTICLE(
	PI_START IN NUMBER,
	PI_END IN NUMBER,
	PI_SORT_TYPE IN VARCHAR,
	PI_KEYWORD IN VARCHAR,
	PI_SEARCH_TYPE IN VARCHAR,
	PI_BOARD_TYPE IN VARCHAR,
	PO_CURSOR OUT SYS_REFCURSOR
)
IS
	V_QUERY VARCHAR(1000);
	V_KEYWORD VARCHAR(20) := '%'||PI_KEYWORD||'%'; 
BEGIN	
	V_QUERY:= 'SELECT TB.NO, TB.TITLE, TB.STOCK_CODE, TB.MEMBER_NO, TB.REGDATE, TB.COMPANY_NAME, TB.COUNT_HIT, TB.COUNT_GOOD, TB.COUNT_BAD
		FROM (SELECT A.NO, A.TITLE, A.STOCK_CODE, A.MEMBER_NO, A.REGDATE,
				(SELECT C.COMPANY FROM COMPANY C WHERE C.STOCK_CODE = A.STOCK_CODE) COMPANY_NAME, 
				(SELECT COUNT(*) FROM HIT H WHERE H.BOARD_NO = A.NO AND H.BOARD_TYPE = '|| ''''||PI_BOARD_TYPE||''') COUNT_HIT,  
				(SELECT COUNT(*) FROM PICK P WHERE P.ARTICLE_NO = A.NO AND OPINION = '||'''Y'''||') COUNT_GOOD,
 				(SELECT COUNT(*) FROM PICK P WHERE P.ARTICLE_NO = A.NO AND OPINION = '||'''N'''||') COUNT_BAD
		FROM ARTICLE A ';

 	IF PI_SEARCH_TYPE = 'all' THEN
 			V_QUERY:= V_QUERY || 'JOIN COMPANY C
						ON A.STOCK_CODE = C.STOCK_CODE 
						WHERE C.COMPANY LIKE  '|| ''''||V_KEYWORD||''' 
						OR A.TITLE LIKE '|| ''''||V_KEYWORD||''' ';
		ELSIF PI_SEARCH_TYPE = 'company' THEN
			V_QUERY:= V_QUERY || 'JOIN COMPANY C
						ON A.STOCK_CODE = C.STOCK_CODE 
						WHERE C.COMPANY LIKE '|| ''''||V_KEYWORD||''' ';
		ELSIF PI_SEARCH_TYPE = 'title' THEN
			V_QUERY:= V_QUERY || 'WHERE A.TITLE LIKE '|| ''''||V_KEYWORD||''' ';
	END IF;			
 	
	IF PI_SORT_TYPE = 'latest' THEN
			V_QUERY:= V_QUERY || ' ORDER BY REGDATE DESC) TB ';
 	
		ELSIF PI_SORT_TYPE = 'popularity' THEN
			V_QUERY:= V_QUERY || ' ORDER BY (COUNT_HIT + COUNT_GOOD + COUNT_BAD) DESC) TB ';
	END IF;
	
	V_QUERY:= V_QUERY || ' WHERE ROWNUM >='|| PI_START ||' AND ROWNUM <= '|| PI_END;
	
	OPEN PO_CURSOR FOR V_QUERY;
END;
/			